buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
            jcenter()
        }
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3"
        classpath "com.marklogic:ml-gradle:3.0.0"
    }
}

plugins {
    id "com.marklogic.ml-gradle" version "3.0.0"
    id "java"
    id "eclipse"
    id "idea"
    id "checkstyle"
    id "maven-publish"
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://developer.marklogic.com/maven2/" }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '4.1'
    }

    sourceSets.test.resources.srcDir 'src/test/java'
}


subprojects {

    /*
     * Not applying the bintray plugin. Couldn't get it working properly when declared
     * in subprojects, and when declared at root level of this script, it caused an httpcomponents
     * classpath issue with ml-gradle in the core project. So for now, each project has to
     * duplicate bintray publishing configuration.
     */

    apply plugin: "java"

    if (it.name in ["core", "infrastructure", "test"]) {
        apply plugin: "com.jfrog.bintray"
        apply plugin: 'maven-publish'
    }

    ext {
        springBatchVersion = '3.0.8.RELEASE'
        springVersion = '4.3.9.RELEASE'
    }

    dependencies {
        compile 'ch.qos.logback:logback-classic:1.1.8'
        compile 'org.slf4j:slf4j-api:1.7.21'
        compile "org.springframework.batch:spring-batch-core:$springBatchVersion"
        compile "com.marklogic:marklogic-client-api:4.0.2"
        compile "com.marklogic:ml-javaclient-util:3.0.0"

        testCompile "org.springframework.batch:spring-batch-test:$springBatchVersion"
        testCompile "com.marklogic:ml-junit:3.0.0"
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    checkstyle {
        configFile = file("${project.rootDir}/dev-tools/checkstyle/checkstyle.xml")
        toolVersion = '7.1.2'
    }

    if (it.name in ["core", "infrastructure", "test"])  {
        task sourcesJar(type: Jar, dependsOn: classes) {
            baseName = artifactId
            version = project.version
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        jar {
            baseName = artifactId
            version = project.version
        }

        /*
         * Assumes each project has a single publication.
         */
        publishing {
            publications {
                mainJavaWithSources(MavenPublication) {
                    groupId group
                    artifactId project.property("artifactId")
                    version project.version
                    from components.java
                    artifact sourcesJar
                }
            }
        }
    }


}

project(':core') {

    dependencies {
        //core doesn't depend on infrastructure but want to grab both jars when importing MSB
        compile project(":infrastructure")

        // Used by ML Job Repo implementation; depends on DataFieldMaxValueIncrementer
        compile "org.springframework:spring-jdbc:$springVersion"

        // Used by MarkLogicBatchConfiguration, which depends on Jaxb2Marshaller
        compile "org.springframework:spring-oxm:$springVersion"

        // For the CLI
        compile "net.sf.jopt-simple:jopt-simple:5.0.1"

        testCompile project(":test")

        runtime "org.springframework.batch:spring-batch-core:$springBatchVersion"

        runtime "org.springframework:spring-jdbc:$springVersion"

        runtime "net.sf.jopt-simple:jopt-simple:5.0.1"
    }

}

project(":infrastructure") {
    description = 'MarkLogic Spring Batch Infrastructure'
    dependencies {
        compile "org.springframework:spring-jdbc:$springVersion"
        compile "org.apache.commons:commons-lang3:3.5"
        testCompile project(':test')
    }
}

project(':test') {
    dependencies {
        compile project(':infrastructure')
        compile project(':core')
        compile "org.springframework.batch:spring-batch-test:$springBatchVersion"
        compile "com.marklogic:ml-junit:3.0.0"
        // For detecting version of MarkLogic
        compile "com.marklogic:ml-app-deployer:3.0.0"
    }
}

project(':samples') {
    apply plugin: "application"

    dependencies {
        compile project(':core')
        compile project(':infrastructure')
        testCompile project(':test')

        // For importing images and extracting text from binaries
        compile "org.apache.tika:tika-parsers:1.13"
    }

    distributions {
        main {
            baseName = "samples"
        }
    }

    jar {
        baseName = "samples"
    }

    mainClassName = "com.marklogic.spring.batch.core.launch.support.CommandLineJobRunner"

    applicationName = "samples"

    task runYourJob(type: JavaExec) {
        main = 'com.marklogic.spring.batch.core.launch.support.CommandLineJobRunner'
        classpath = sourceSets.test.runtimeClasspath
        args = ["--job_path", "com.marklogic.spring.batch.samples.JobsConfig",
                "--job_id", "job",
                "--output_collections", "runYourJob",
                "--next"]
    }
}

project(':mlJobRepo') {
    apply plugin: "application"

    //Needed for mlInit, mlInstallAdmin
    apply plugin: "com.marklogic.ml-gradle"

    task deployMarkLogicJobRepository(type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        main = 'com.marklogic.spring.batch.DeployMarkLogicJobRepository'
        args = ["--name", mlJobRepositoryName, "--host", mlHost, "--port", mlRestPort, "--username", mlManageUsername, "--password", mlManagePassword]
    }

    task undeployMarkLogicJobRepository(type: JavaExec) {
        classpath = sourceSets.main.runtimeClasspath
        main = 'com.marklogic.spring.batch.DeployMarkLogicJobRepository'
        args = ["--undeploy", "--name", mlJobRepositoryName, "--host", mlHost, "--port", mlRestPort, "--username", mlManageUsername, "--password", mlManagePassword]
    }

// Setup the Job Repo in our test application so it's available for use by tests.
    mlPostDeploy.dependsOn deployMarkLogicJobRepository
    mlUndeploy.dependsOn undeployMarkLogicJobRepository

    dependencies {
        // For deploying the ML Job Repo
        compile "com.marklogic:ml-app-deployer:3.0.0"

        // For the CLI
        compile "net.sf.jopt-simple:jopt-simple:5.0.1"
    }

    mainClassName = "com.marklogic.spring.batch.DeployMarkLogicJobRepository"

}

project(":rdf") {
    description = 'MarkLogic Spring Batch Infrastructure: Triples'
    dependencies {
        // For importing RDF
        compile('org.apache.jena:jena-arq:2.13.0') {
            exclude(group: 'org.slf4j')
            exclude(group: 'ch.qos.logback')
            exclude(group: 'log4j')
        }
        compile('org.apache.jena:jena-core:2.13.0') {
            exclude(group: 'org.slf4j')
            exclude(group: 'xerces')
            exclude(group: 'commons-cli')
        }
        compile('com.hp.hpl.jena:jena:2.6.4') {
            exclude(group: 'org.slf4j')
        }
        compile('com.marklogic:marklogic-jena:1.0.0'){
            changing=true
            exclude(group: 'org.slf4j')
            exclude(group: 'log4j')
            exclude(group: 'ch.qos.logback')
        }

        testCompile project(':test')
    }

}

project (':shapefiles') {

    dependencies {
        compile "org.apache.httpcomponents:httpmime:4.5.2"
        compile project(':infrastructure')
        testCompile project(':test')
    }

}
